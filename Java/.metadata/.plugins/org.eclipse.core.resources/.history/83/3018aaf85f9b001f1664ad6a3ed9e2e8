package vffv;


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class xxxx extends JFrame {

    private JTextField nameField;
    private JComboBox<String> equipmentComboBox;
    private JComboBox<String> typeComboBox;
    private JCheckBox installationCheckBox;
    private JTextField usagePeriodField;
    private JTextField costField;
    private JTextArea resultArea;

    // Используем массивы для хранения опций
    private String[] equipmentOptions = {"Компьютер", "Принтер", "Сканер"};
    private String[] typeOptions = {"Офисное", "Промышленное", "Бытовое"};

    // Массивы для хранения данных
    private String[] dataFields = new String[6]; // Имя, Оборудование, Вид, Требуется установка, Срок использования, Стоимость

    public xxxx() {
        super("Оборудование");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Панель для ввода данных
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.Y_AXIS));

        // Имя клиента
        JPanel namePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        namePanel.add(new JLabel("Имя клиента:"));
        nameField = new JTextField(20);
        namePanel.add(nameField);
        inputPanel.add(namePanel);

        // Оборудование
        JPanel equipmentPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        equipmentPanel.add(new JLabel("Оборудование:"));
        equipmentComboBox = new JComboBox<>(equipmentOptions);
        equipmentPanel.add(equipmentComboBox);
        inputPanel.add(equipmentPanel);

        // Вид оборудования
        JPanel typePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        typePanel.add(new JLabel("Вид оборудования:"));
        typeComboBox = new JComboBox<>(typeOptions);
        typePanel.add(typeComboBox);
        inputPanel.add(typePanel);

        // Требуется установка или нет
        JPanel installationPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        installationPanel.add(new JLabel("Требуется установка:"));
        installationCheckBox = new JCheckBox();
        installationPanel.add(installationCheckBox);
        inputPanel.add(installationPanel);

        // Срок полезного использования (лет)
        JPanel usagePeriodPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        usagePeriodPanel.add(new JLabel("Срок полезного использования (лет):"));
        usagePeriodField = new JTextField(10);
        usagePeriodPanel.add(usagePeriodField);
        inputPanel.add(usagePeriodPanel);

        // Стоимость в рублях
        JPanel costPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        costPanel.add(new JLabel("Стоимость в рублях:"));
        costField = new JTextField(10);
        costPanel.add(costField);
        inputPanel.add(costPanel);

        add(inputPanel, BorderLayout.CENTER);

        // Кнопка результатов и область вывода результатов
        JPanel buttonAndResultPanel = new JPanel();
        buttonAndResultPanel.setLayout(new BoxLayout(buttonAndResultPanel, BoxLayout.Y_AXIS));

        JButton resultButton = new JButton("Результат");
        resultButton.addActionListener(new ResultButtonListener());
        buttonAndResultPanel.add(resultButton);

        resultArea = new JTextArea(10, 30);
        resultArea.setEditable(false);

        JScrollPane scrollPane = new JScrollPane(resultArea);

        buttonAndResultPanel.add(scrollPane);

        add(buttonAndResultPanel, BorderLayout.EAST);

        pack();
        setVisible(true);
    }

    private class ResultButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            String name = nameField.getText().trim();
            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(xxxx.this, "Пожалуйста, введите имя клиента.");
                return;
            }
            dataFields[0] = name;

            String equipment = (String) equipmentComboBox.getSelectedItem();
            dataFields[1] = equipment;

            String type = (String) typeComboBox.getSelectedItem();
            dataFields[2] = type;

            boolean requiresInstallation = installationCheckBox.isSelected();
            dataFields[3] = requiresInstallation ? "Да" : "Нет";

            int usagePeriod;
            try {
                usagePeriod = Integer.parseInt(usagePeriodField.getText().trim());
                dataFields[4] = String.valueOf(usagePeriod);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(xxxx.this, "Срок полезного использования должен быть целым числом.");
                return;
            }

            double cost;
            try {
                cost = Double.parseDouble(costField.getText().trim());
                dataFields[5] = String.valueOf(cost);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(xxxx.this, "Стоимость должна быть числом.");
                return;
            }

            StringBuilder resultText = new StringBuilder();
            resultText.append("Здравствуйте, ").append(dataFields[0]).append("!\n");
            resultText.append("Выбранное оборудование:\n");
            resultText.append("Название: ").append(dataFields[1]).append("\n");
            resultText.append("Вид: ").append(dataFields[2]).append("\n");
            resultText.append("Требуется установка: ").append(dataFields[3]).append("\n");
            resultText.append("Срок полезного использования (лет): ").append(dataFields[4]).append("\n");
            resultText.append("Стоимость в рублях: ").append(dataFields[5]).append("\n");

            resultArea.setText(resultText.toString());
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(xxxx::new);
    }
}
